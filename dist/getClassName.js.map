{"version":3,"sources":["../src/getClassName.js"],"names":["DEFAULT_HANDLE_MISSING_STYLENAME_OPTION","isNamespacedStyleName","styleName","indexOf","getClassNameForNamespacedStyleName","styleModuleImportMap","handleMissingStyleNameOption","styleNameParts","split","importName","moduleName","handleMissingStyleName","Error","console","warn","log","styleNameValue","options","styleModuleImportMapKeys","Object","keys","filter","map","length","styleModuleMap","className","join"],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType\n} from './types';\n\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  if (!moduleName) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('Invalid style name: ' + styleName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('Invalid style name: ' + styleName);\n    } else if (handleMissingStyleName.indexOf('through') !== -1) {\n      if (handleMissingStyleName.indexOf('log') !== -1) console.log('Invalid style name: ' + styleName + '. But it was through.');\n      return styleName;\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module import does not exist: ' + importName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module import does not exist: ' + importName);\n    } else if (handleMissingStyleName.indexOf('through') !== -1) {\n      if (handleMissingStyleName.indexOf('log') !== -1) console.log('CSS module import does not exist: ' + importName + '. But \\'' + styleName + '\\' was through.');\n      return styleName;\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module does not exist: ' + moduleName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module does not exist: ' + moduleName);\n    } else if (handleMissingStyleName.indexOf('through') !== -1) {\n      if (handleMissingStyleName.indexOf('log') !== -1) console.log('CSS module does not exist: ' + moduleName + '. But it was through.');\n      return moduleName;\n    } else {\n      return null;\n    }\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute for style name \\'' + styleName +\n          '\\' without importing at least one stylesheet.');\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        throw new Error('Cannot use anonymous style name \\'' + styleName +\n          '\\' with more than one stylesheet import.');\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        if (handleMissingStyleName === 'throw') {\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName.indexOf('through') !== -1) {\n          if (handleMissingStyleName.indexOf('log') !== -1) console.log('the styleName \\'' + styleName + '\\' was through into className.');\n          return styleName;\n        }\n\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .filter((className) => {\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n      return className;\n    })\n    .join(' ');\n};\n"]}